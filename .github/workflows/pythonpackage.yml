name: Test

on: [push, pull_request]

jobs:
  macos:

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v1
    - name: Set up Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pylint
    - name: Build lib
      run: |
        make lib -j 16
    - name: Test
      run: |
        g++ --version
        env MYS="PYTHONPATH=$(pwd) python -m mys" python -m unittest

  windows:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v1
    - name: Set up Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pylint
    - name: Build lib
      run: |
        $Env:PYTHONUTF8 = 1
        make lib -j 16
    - name: Test
      run: |
        $Env:PYTHONUTF8 = 1
        python -m unittest tests.test_mys

  windows-msys2:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v1
    - name: Set up Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - uses: msys2/setup-msys2@v2
      with:
        update: true
        install: >-
          git
          base-devel
    - name: Install dependencies
      run: |
        python --version
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pylint
        
  linux:

    runs-on: ubuntu-20.04
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.8, 3.9]

    steps:
    - uses: actions/checkout@v1
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pylint
    - name: Build lib
      run: |
        make lib -j 16
    - name: Test
      run: |
        g++ --version
        env MYS="PYTHONPATH=$(readlink -f .) python -m mys" python -m unittest

  linux-install-and-ccache:

    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v1
    - name: Set up Python 3.9
      uses: actions/setup-python@v1
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        sudo apt-get install -qq ccache -y
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pylint
    - name: Install
      run: |
        make test-install

  release:
    needs: [macos, windows, windows-msys2, linux, linux-install-and-ccache]
    runs-on: ubuntu-20.04
    if: startsWith(github.ref, 'refs/tags')

    steps:
    - name: Checkout
      uses: actions/checkout@v1
    - name: Set up Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - name: Install pypa/build
      run: |
        python -m pip install build --user
    - name: Build a binary wheel and a source tarball
      run: |
        git clean -dfx
        python -m build --sdist --outdir dist/ .
    - name: Publish distribution ðŸ“¦ to PyPI
      uses: pypa/gh-action-pypi-publish@master
      with:
        skip_existing: true
        password: ${{ secrets.pypi_password }}
