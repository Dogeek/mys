from thread import Thread
from timer import Timer
from random.pseudo import random
from .calculator import Calculator
from .calculator import Add
from .calculator import Result

class _Timeout(Message):

    pass

class _CalcTimer(Timer):

    _student_queue: Queue<Message>

    @override
    def on_timeout(self):
        self._student_queue.put(_Timeout())

class Student(Thread):
    """A student adding two numbers using a calculator.

    """

    _student_queue: Queue<Message>
    _calculator_queue: Queue<Message>
    _timer: _CalcTimer

    def __init__(self,
                 student_queue: Queue<Message>,
                 calculator_queue: Queue<Message>):
        self._student_queue = student_queue
        self._calculator_queue = calculator_queue
        self._timer = _CalcTimer(self)

    def _start_timer(self):
        self._timer.start(1)

    @override
    def start(self):
        super().start()
        self._start_timer()

    @override
    def run(self):
        while True:
            self.handle(self._student_queue.get())

    def handle(self, message: _Timeout):
        print()
        print(message)
        self._calculator_queue.put(Add(random(), random()))

    def handle(self, message: Result):
        print(message)
        self._start_timer()
