"""mys-embedded-c++-before-namespace
#include <sqlite3.h>
"""

@enum
class _Result:

    OK = SQLITE_OK
    ROW = SQLITE_ROW
    DONE = SQLITE_DONE

@enum(u8)
class Type:

    INTEGER = SQLITE_INTEGER
    FLOAT = SQLITE_FLOAT
    STRING = SQLITE_TEXT
    NULL = SQLITE_NULL
    BLOB = SQLITE_BLOB

class Database:

    def __init__(self, path: string):
        pass

    def execute(self, sql: string):
        """Execute the statement.

        """

        raise NotImplementedError()

    def prepare(self, sql: string) -> Statement:
        """Prepare a statement.

        """

        raise NotImplementedError()

class Statement:

    def __init__(self, sql: string):
        pass

    def bind_int(self, column: i32, value: i64):
        raise NotImplementedError()

    def bind_float(self, column: i32, value: f64):
        raise NotImplementedError()

    def bind_string(self, column: i32, value: string):
        raise NotImplementedError()

    def bind_null(self, column: i32):
        raise NotImplementedError()

    def execute(self):
        """Execute the statement.

        """

        result = self._step()

        if result != _Result.OK:
            raise Error()

        self._reset()

    def fetch(self) -> bool:
        """Fetch the next row from the database. Returns ``True`` if a row was
        fetched and ``False`` when there are no more rows available.

        """

        result = self._step()

        if result == _Result.ROW:
            return True
        elif result == _Result.DONE:
            self._reset()

            return False
        else:
            raise Error()

    def _step(self) -> _Result:
        raise NotImplementedError()

    def _reset(self):
        raise NotImplementedError()

    def column_type(self, column: i32) -> Type:
        """Get the type of given column.

        """

        raise NotImplementedError()

    def column_int(self, column: i32) -> i64:
        """Get the value of given column as an integer.

        """

        raise NotImplementedError()

    def column_float(self, column: i32) -> f64:
        """Get the value of given column as a float.

        """

        raise NotImplementedError()

    def column_string(self, column: i32) -> string:
        """Get the value of given column as a string.

        """

        raise NotImplementedError()
