class InventoryItem:
    """An inventory item.

    """

    name: string
    "Its name."

    quantity: u32
    """Its quantity.

    Must be greater or equal to zero.

    """

    # Automatically added if not user defined:

    def __init__(self, name: string = None, quantity: u32 = 0):
        self.name = name
        self.quantity = quantity

    def __str__(self):
        return f"InventoryItem(name={self.name}, quantity={self.quantity})"

@trait
class Shape:

    def area(self) -> u32:
        """Returns the area of the shape.

        """

class Square(Shape):
    side: u32

    def area(self) -> u32:
        return side * side

    # Automatically added if not user defined:

    def __init__(self, side: u32 = 0):
        self.side = side

    def __str__(self):
        return f"Square(side={self.side})"

def calc_default_bar():
    return 0

class Fie:
    a: i32
    b: string

class Fam:
    bar: Bar

@trait
class Goo:
    pass

_FAM: Fam = Fam()

class Bar(Goo):
    foo: i64
    bar: i32 = calc_default_bar()
    fie: Fie = Fie(1, b="Hello!")
    fam1: Fam = _FAM
    fam2: Fam

    # Automatically added if not user defined:

    def __init__(self,
                 foo: int = 0,
                 bar: int = calc_default_bar(),
                 fie: Fie = Fie(1, b="Hello!"),
                 fam1: Fam = _FAM,
                 fam2: Fam = None):
        self.foo = foo
        self.bar = bar
        self.fie = fie
        self.fam1 = fam1
        self.fam2 = fam2

# Should probably be replaced by "trait A:" eventually.
@trait
class A:

    def area(self) -> u32:
        return self.length() ** 2

    def length(self) -> u32:
        return 2

class B(A):
    pass

class C(A):

    def length(self) -> u32:
        return 3

class Cow:
    _data: bytes

    def to_bytes(self) -> bytes:
        return self._data

    # "static" methods do not operate on self. Same as any function
    # except that it is defined in the class namespace.
    def from_bytes(data: bytes) -> Cow:
        return Cow(data)

# Should probably be replaced by "trait First:" eventually.
@trait
class First:

    def foo(self) -> bool:
        pass

# Should probably be replaced by "trait Second<T>:" eventually.
@trait
@generic(T)
class Second:

    def foo(self) -> T:
        pass

# Should probably be replaced by "class Conflict(First,
# Second<bool>):" eventually.
class Conflict(First, Second[bool]):

    @trait(First)
    def foo(self) -> bool:
        return True

    @trait(Second[bool])
    def foo(self) -> bool:
        return False

# Should probably be replaced by "enum Color(u8):" eventually.
@enum(u8)
class Color:
    Red = 0
    Green = 1
    Blue = 2
    Yellow = 3

def main():
    apples = InventoryItem("Apples", 1.3)
    assert str(apples) == "InventoryItem(name=\"Apples\", quantity=1.3)"

    b = B()
    assert b.length() == 2
    assert b.area() == 4

    c = C()
    assert c.length() == 3
    assert c.area() == 9

    cow_1 = Cow(b"1234")
    data = cow_1.to_bytes()
    cow_2 = Cow.from_bytes(data)
    assert cow_1 == cow_2
    assert cow_1 is not cow_2

    conflict = Conflict()
    assert conflict.foo[First]()
    assert not conflict.foo[Second]()

    assert Color.Red == 0
    color: u8 = Color.Yellow
    assert color == 3
    assert str(Color.Green) == "Color.Green"
    assert Color(2) == Color.Blue
