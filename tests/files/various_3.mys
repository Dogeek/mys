def char_foo(v: char) -> char:
    return v

@test
def test_char():
    a = '1'
    b = char(0x31)

    assert a == b
    assert char_foo('5') == '5'
    assert char_foo(a) == a

class MoreTape:
    pass

@trait
class MoreBase:

    def execute(self, tape: MoreTape):
        pass

class MoreFoo(MoreBase):
    x: MoreBase

    def execute(self, tape: MoreTape):
        pass

class MoreBar:
    x: [MoreBase]

    def execute(self, tape: MoreTape):
        pass

@test
def test_more_traits():
    foo = MoreFoo(None)
    bar = MoreBar([foo])

    assert foo.x is None
    assert len(bar.x) == 1

@test
def test_string_get_char():
    a = "cactus"

    assert a[0] == 'c'
    assert a[4] == 'u'
    assert a[5] == 's'

    res = 0

    try:
        print(a[6])
    except IndexError:
        res = 1

    assert res == 1

@test
def test_string_set_char():
    a = "cactus"
    a[0] = 'C'
    a[4] = 'U'
    a[5] = 'S'

    assert a == "CactUS"

    ch = a[3]
    ch = 'x'

    assert a == "CactUS"

    res = 0

    try:
        a[6] = '!'
    except IndexError:
        res = 1

    assert res == 1

@test
def test_string_len_of_none():
    v: string = None
    res = 0

    try:
        print(len(v))
    except NoneError:
        res = 1

    assert res == 1

@test
def test_list_len_of_none():
    v: [u8] = None
    res = 0

    try:
        print(len(v))
    except NoneError:
        res = 1

    assert res == 1

@test
def test_dict_len_of_none():
    v: {u8: string} = None
    res = 0

    try:
        print(len(v))
    except NoneError:
        res = 1

    assert res == 1

@test
def test_string_str_of_none():
    v: string = None

    assert str(v) == "None"

@test
def test_list_str_of_none():
    v: [u8] = None

    assert str(v) == "None"

@test
def test_dict_str_of_none():
    v: {u8: string} = None

    assert str(v) == "None"

@test
def test_char_match_1():
    res = 0
    value = 'a'

    match value:
        case 'a':
            res = 1
        case 'b':
            res = 2

    assert res == 1

@test
def test_char_match_2():
    v = ['a']
    res = 0

    match v[0]:
        case 'a':
            res = 1
        case 'b':
            res = 2

    assert res == 1

@test
def test_u64_literal_match():
    res = 0

    # Should this be allowed?
    match 5:
        case 5:
            res = 1
        case 7:
            res = 2

    assert res == 1

@test
def test_iterate_over_string():
    v: [char] = []
    country = "sweden"

    for ch in country:
        v.append(ch)

    assert v == ['s', 'w', 'e', 'd', 'e', 'n']

@test
def test_add_char_to_string():
    country = "swede"
    country += 'n'

    assert country == "sweden"

@test
def test_unicode_string():
    assert len(str("\u03b1")) == 1
    assert len("\u03b1") == 1
    s = "\u2800\U00010924"
    assert s[0] == '\u2800'
    assert s[1] == '\U00010924'

@test
def test_char_to_string():
    assert str('1') == "1"
    assert '\u03b1' == char(945)
    assert str('\u03b1') == "\u03b1"

@test
def test_bytes():
    v1 = b"\x12\x34\x56"
    v2: bytes = b""

    assert v1 == b"\x12\x34\x56"
    assert v2 == b""
    assert v1 != v2

    if v1 != b"\x12\x34\x56":
        assert False

    if v2 != b"":
        assert False

    if v1 == v2:
        assert False

    assert len(v1) == 3
    assert len(v2) == 0

    v1 += 0x78
    assert v1 == b"\x12\x34\x56\x78"

    v1 += b"\x9a"
    assert v1 == b"\x12\x34\x56\x78\x9a"

    assert v1[0] == 0x12
    assert v1[1] == 0x34
    assert v1[4] == 0x9a

    res = 0

    try:
        print(v1[5])
    except IndexError:
        res = 1

    assert res == 1

    v1[0] = 0
    v1[1] += 1
    t = v1[2]
    t = 1
    assert v1 == b"\x00\x35\x56\x78\x9a"

@test
def test_bytes_str_of_none():
    v: bytes = None

    assert str(v) == "None"

@test
def test_tuple_access():
    v = (1, True, "")

    a = v[0]
    a += 1
    assert a == 2
    assert v[0] == 1

    b = v[1]
    b = False
    assert not b
    assert v[1]

@test
def test_for_loop_modify_integer():
    values = [1, 2]

    for value in values:
        value += 1

    assert values == [1, 2]

@test
def test_for_loop_modify_string():
    values = ["1", "2"]

    for value in values:
        value += "1"

    assert values == ["11", "21"]

class ForFoo:
    x: u64

@test
def test_for_loop_modify_class():
    values = [ForFoo(1), ForFoo(2)]

    for value in values:
        value.x += 1

    assert values[0].x == 2
    assert values[1].x == 3

@test
def test_for_loop_slice_modify_integer():
    values = [0, 1, 2, 3, 4]
    sliced: [i64] = []

    for value in slice(values, 1, 3):
        value += 1
        sliced.append(value)

    assert values == [0, 1, 2, 3, 4]
    assert sliced == [2, 3]

@test
def test_string_to_utf8():
    s = "Hello!"
    assert s.to_utf8() == b"Hello!"
    s = "士师」一词，ctext的语译是司法部长。请问有何根"
    assert s.to_utf8() == (
        b"\xe5\xa3\xab\xe5\xb8\x88\xe3\x80\x8d\xe4\xb8\x80\xe8\xaf\x8d\xef"
        b"\xbc\x8c\x63\x74\x65\x78\x74\xe7\x9a\x84\xe8\xaf\xad\xe8\xaf\x91"
        b"\xe6\x98\xaf\xe5\x8f\xb8\xe6\xb3\x95\xe9\x83\xa8\xe9\x95\xbf\xe3"
        b"\x80\x82\xe8\xaf\xb7\xe9\x97\xae\xe6\x9c\x89\xe4\xbd\x95\xe6\xa0"
        b"\xb9")

@test
def test_string_upper():
    s = "Hello!"
    s.upper()
    assert s == "HELLO!"

@test
def test_string_lower():
    s = "Hello!"
    s.lower()
    assert s == "hello!"

class ReturnFoo:
    v: i32

    def bar(self) -> ReturnFoo:
        return ReturnFoo(2 * self.v)

@test
def test_return_foo():
    foo = ReturnFoo(1).bar().bar().bar()

    assert foo.v == 8

@test
def test_value_if_cond_else_value():
    assert (1 if True else 2) == 1

    a = 1
    b = 2
    c = 3

    assert (a if 1 == b else c) == c

@test
def test_string_to_integer():
    assert i32("-12") == -12
    assert u32("12") == 12

@test
def test_string_starts_with():
    s = "hello"

    assert s.starts_with("")
    assert s.starts_with("h")
    assert s.starts_with("hell")
    assert s.starts_with("hello")
    assert not s.starts_with("hello!")
    assert not s.starts_with("e")

def deduce_foo() -> (u16, [i64]):
    return (1, [3, 4])

@test
def test_deduce_compare_types():
    assert u8(1) == 1
    assert -5 != 1
    assert [i8(-1)] == [-1]
    assert (u8(1), 5) == (1, i8(5))
    assert deduce_foo() == (1, [3, 4])
    assert (1.0, [3, 4]) != (1.0, [3, -4, 4, 1])
    assert (1.0, [3, 4]) != (1.0, [3, i8(-4)])
    assert ([(1, True), (i8(5), False)]) == ([(1, True), (5, False)])
    assert [[(1, True)]] != [[(1, True)], [], []]
    assert ([], 5) == ([], 5)
    assert [] == []
    v: [i16] = []
    assert v == []
    assert [[]] == [[]]
    assert [[], []] != [[], [(True, False)]]

@trait
class BaseWithMethodBody:

    def foo(self) -> i64:
        return self.x

class FooWithMethodBody(BaseWithMethodBody):
    x: i64

class BarWithMethodBody(BaseWithMethodBody):

    def foo(self) -> i64:
        return -1

def trait_with_method_body(v: BaseWithMethodBody) -> i64:
    return v.foo()

@test
def test_trait_with_method_body():
    assert trait_with_method_body(FooWithMethodBody(3)) == 3
    assert trait_with_method_body(BarWithMethodBody()) == -1
    assert FooWithMethodBody(2).foo() == 2
    assert BarWithMethodBody().foo() == -1

# ToDo
# class UserError(Error):
#
#     pass
#
# @test
# def test_user_defined_error():
#     res = 0
#
#     try:
#         raise UserError()
#     except UserError:
#         res = 1
#
#     assert res == 1

@test
def test_unary():
    assert -1 == -1
    assert -1.0 == -1.0
    assert +1 == +1
    assert +1.0 == +1.0

@test
def test_variable_declaration():
    values: [[i32]] = [[], []]
    assert values == [[], []]

@test
def test_string_formatting():
    name = "Bob"
    assert f"Hi {name}!" == "Hi Bob!"

@test
def test_char_formatting():
    name = ['B', 'o', 'b']
    assert f"Hi {name[0]}{name[1]}{name[2]}!" == "Hi Bob!"

@test
def test_u8_i8_formatting():
    u8num: u8 = 50
    i8num: i8 = 51
    assert f"{u8num}, {i8num}" == "50, 51"

@test
def test_string_formatting_with_number_first():
    assert f"{1}" == "1"
    assert f"{1}{2}" == "12"

@test
def test_define_variable_in_if_and_else_branches_1():
    y = 0

    if False:
        x = 1
        y = 2
    else:
        x = 3
        y = 4

    assert x == 3
    assert y == 4

@test
def test_define_variable_in_if_and_else_branches_2():
    if False:
        x = 1
    elif False:
        x = 2
    else:
        if True:
            x = 3
        else:
            x = 4

    assert x == 3

@test
def test_define_list_variable_in_if_and_else_branches():
    if True:
        x = [1, 3, 5]
    else:
        x = [2]

    assert x == [1, 3, 5]

@test
def test_define_variable_in_try_except_branches_1():
    try:
        x: i8 = 1
    except:
        x: i8 = 2

    assert x == 1

@test
def test_define_variable_in_try_except_branches_2():
    try:
        x = 3
    except GeneralError:
        x = 2
    except ValueError:
        x = 1

    assert x == 3

@test
def test_define_variable_in_try_except_branches_3():
    try:
        x = 3
    except GeneralError:
        x = 2
    else:
        pass

    assert x == 3

@test
def test_define_variable_in_try_except_branches_4():
    try:
        x = 3
    except GeneralError:
        x = 2
    else:
        x = 4

    assert x == 4

@test
def test_define_variable_in_all_branches_1():
    try:
        if False:
            x = 1
        else:
            x = 2
    except GeneralError:
        try:
            x = 3
        except:
            if True:
                x = 4
            else:
                x = 5

    assert x == 2

@test
def test_char_to_i32():
    assert i32('1') == 0x31

@test
def test_system_exit_error():
    try:
        res = 0

        raise SystemExitError()
    except SystemExitError:
        res = 1

    assert res == 1

@test
def test_tuple_unpack_in_for_loop_1():
    values = [(True, "x"), (False, "y")]
    bools: [bool] = []
    stringz = ""

    for a, b in values:
        bools.append(a)
        stringz += b

    assert bools == [True, False]
    assert stringz == "xy"

def test_tuple_unpack_in_for_loop_2():
    values = [(True, "x"), (False, "y")]
    bools: [bool] = []
    stringz = ""

    for i, (a, b) in enumerate(values):
        bools.append(a)
        stringz += b

    assert bools == [True, False]
    assert stringz == "xy"

@test
def test_tuple_unpack_in_for_loop_none_element():

    try:
        res = 0

        for a, b in [(True, "x"), None]:
            print(a, b)
    except NoneError:
        res = 1

    assert res == 1

def named_parameters(a: bool, b: string, c: string) -> string:
    return f"{a} {b} {c}"

@test
def test_named_function_parameters():
    assert named_parameters(True, "1", "2") == "True 1 2"
    assert named_parameters(a=True, b="1", c="2") == "True 1 2"
    assert named_parameters(True, c="1", b="2") == "True 2 1"
    assert named_parameters(True, "1", c="2") == "True 1 2"

@trait
class NamedBase:

    def named_parameters_base(self, a: bool, b: string, c: NamedFoo) -> string:
        return f"{a} {b} {c}"

class NamedFoo(NamedBase):

    def named_parameters(self, a: bool, b: string, c: string) -> string:
        return f"{a} {b} {c}"

def named_parameters_base(base: NamedBase):
    foo = NamedFoo()

    assert base.named_parameters_base(True, "1", foo) == "True 1 NamedFoo()"
    assert base.named_parameters_base(a=True, b="1", c=foo) == "True 1 NamedFoo()"
    assert base.named_parameters_base(True, c=foo, b="2") == "True 2 NamedFoo()"
    assert base.named_parameters_base(True, "1", c=foo) == "True 1 NamedFoo()"
    assert base.named_parameters_base(True, "1", c=None) == "True 1 None"

@test
def test_named_method_parameters():
    foo = NamedFoo()

    assert foo.named_parameters(True, "1", "2") == "True 1 2"
    assert foo.named_parameters(a=True, b="1", c="2") == "True 1 2"
    assert foo.named_parameters(True, c="1", b="2") == "True 2 1"
    assert foo.named_parameters(True, "1", c="2") == "True 1 2"

    named_parameters_base(foo)

class NamedDefaultFoo:
    a: i32
    b: i32
    c: string

    def __init__(self, a: i32, b: i32 = -1, c: string = None):
        self.a = a
        self.b = b
        self.c = c

@test
def test_constructor_with_named_and_default_parameters():
    foo = NamedDefaultFoo(1)
    assert foo.a == 1
    assert foo.b == -1
    assert foo.c is None

    foo = NamedDefaultFoo(1, b=-1)
    assert foo.a == 1
    assert foo.b == -1
    assert foo.c is None

    foo = NamedDefaultFoo(1, b=5, c="hi")
    assert foo.a == 1
    assert foo.b == 5
    assert foo.c  == "hi"

    foo = NamedDefaultFoo(1, c="hi", b=2)
    assert foo.a == 1
    assert foo.b == 2
    assert foo.c == "hi"

def return_tuple_items_as_none() -> (string, bytes, [bool], {bool: i32}):
    return (None, None, None, None)

@test
def test_return_tuple_items_as_none():
    assert return_tuple_items_as_none() is not (None, None, None, None)
    assert return_tuple_items_as_none() == (None, None, None, None)

def cpp_reserved(long: i32) -> i32:
    return long

class CppReserved:
    true: i32

@test
def test_cpp_reserved():
    short = 1
    assert short == 1

    default: i8 = 2
    assert default == 2

    if default == 1 or short == 2:
        pass

    for int in range(1):
        pass

    assert cpp_reserved(1) == 1
    assert CppReserved(1).true == 1

    if True:
        double = 1
    else:
        double = 2

    assert 1 == double

class ReturnSelf:

    def get_self(self) -> ReturnSelf:
        return self

    def get_same(self, this: ReturnSelf) -> ReturnSelf:
        return this

@test
def test_return_self():
    x = ReturnSelf()

    assert x is x.get_self()
    assert x is x.get_same(x)
    assert x is x.get_self().get_same(x)

@test
def test_slice_of_string():
    for ch in slice("12", 1):
        assert ch == '2'

@test
def test_zip_of_string():
    text = ""
    values: [i64] = []

    for ch, v in zip("12", [3, 4]):
        text += ch
        values.append(v)

    assert text == "12"
    assert values == [3, 4]
