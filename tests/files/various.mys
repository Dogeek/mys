# pylint: disable=using-constant-test
# pylint: disable=undefined-variable

def foo() -> int:
    return 5

V1: int = (1 << 2) / 2
V2: int = foo() + 1

def bar(_a: (int, str)):
    pass

def fie(a: str) -> str:
    return 2 * a

# def calc(callback: Callable[[int, int], int]) -> int:
#     return callback(1, 2)

# def add(a: int, b: int) -> int:
#     return a + b

class Adder:

    def __init__(self):
        self.value: int = 1

    def add(self, a: int, b: int) -> int:
        return self.value + a + b

@test
def test_1():
    # # Text.
    # with open('foo.txt', 'w') as fout:
    #     fout.write('1')
    #
    # with open('foo.txt', 'r') as fin:
    #     assert fin.read() == '1'
    #
    # # Binary.
    # with open('foo.bin', 'wb') as fout:
    #     fout.write(b'\x01')
    #
    # with open('foo.bin', 'rb') as fin:
    #     assert fin.read() == b'\x01'

    res: int = 0

    if True:
        res = 1

    assert res == 1

    if False:
        res = 2
    else:
        res = 3

    assert res == 3

    if False:
        res = 4
    elif False:
        res = 5
    elif True:
        res = 6
    else:
        res = 7

    assert res == 6

    try:
        raise TypeError('foo')
    except ValueError:
        res = 8
    except TypeError as e:
        print(e)
        res = 9
    finally:
        assert res == 9
        print('finally')
        res = 10

    assert res == 10

@test
def test_2():
    res: int = 0
    a: int = 5

    try:
        try:
            for i in range(5):
                print('i, a, i * a:', i, a, i * a)

            raise ValueError()
        except ValueError as e:
            res = 11
            print(e)
            raise

        raise TypeError()
    except ValueError as e:
        assert res == 11
        print(e)
        res = 12

    assert res == 12

    try:
        raise ValueError()
    except:
        res = 13
        print('Any')

    assert res == 13

    try:
        assert False
    except AssertionError as e:
        res = 14
        print(e)

    assert res == 14

    assert V1 == 2
    assert V2 == 6

    # assert calc(add) == 3
    adder: Adder = Adder()
    assert adder.value == 1
    adder.value += 1
    assert adder.value == 2
    # assert calc(adder.add) == 5

@test
def test_3():
    s: str = 'hello'
    print('s:', s, len(s), str(s))
    assert len(s) == 5
    assert str(s) == s
    assert s == 'hello'
    assert s != 'hello!'
    t: str = s
    assert s == t
    t += '!'
    assert t == 'hello!'
    assert s == t
    assert str(1) == '1'
    assert str(1.0) == '1.000000'
    u: int = -5000
    v: str = str(u)
    assert v == '-5000'
    assert 4 * v == '-5000-5000-5000-5000'
    assert v * 3 == '-5000-5000-5000'
    assert v + v == '-5000-5000'

    assert fie(v) == '-5000-5000'

@test
def test_4():
    w: [int] = []
    print('w:', w)
    assert len(w) == 0
    w.append(5)
    w.append(1)
    print('w:', w)
    assert len(w) == 2
    x: [int] = [5, 1, 5, 1]
    assert w != x
    assert 2 * w == x
    assert len(2 * w) == 4

    l1: [int] = [1, 2]
    acc: int = 0

    for i in l1:
        acc += i

    assert acc == 3

    res: int = 0

    try:
        res = 1
    finally:
        assert res == 1
        res = 2

    assert res == 2

    '''mys-embedded-c++

    int vv = atoi("2");
    '''

    assert vv == 2

    assert min(-10, 10) == -10
    assert min(100.1, -200.7) == -200.7
    assert max(-10, 10) == 10
    assert max(100.1, -200.7) == 100.1
    mm: int = 10
    nn: int = 15
    assert min(2 * mm, 21, nn) == 15
    assert max(2 * mm, 21, nn) == 21
    ll: [int] = [mm, nn]
    assert min(ll) == 10
    assert max(ll) == 15
    assert sum(ll) == 25
    assert abs(-1) == 1
    assert abs(5) == 5
    assert abs(-1.5) == 1.5

    assert len(range(-2, 10)) == 12
    assert min(range(-2, 10)) == -2
    assert max(range(-2, 10)) == 9
    assert sum(range(-2, 10)) == 42

    s1: str = '''a\t
    multi
    line
    string\n'''
    s2: str = 'a\t\n    multi\n    line\n    string\n'
    assert s1 == s2

    lc: [int] = [1, 2, 4]
    assert 1 in lc
    assert 3 not in lc
