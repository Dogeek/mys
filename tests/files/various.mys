def foo() -> int:
    return 5


V1: int = (1 << 2) / 2
V2: int = foo() + 1


def bar(a: (int, str)):
    pass


# def calc(callback: Callable[[int, int], int]) -> int:
#     return callback(1, 2)
#
#
# def add(a: int, b: int) -> int:
#     return a + b
#
#
# class Adder:
#
#     def __init__(self):
#         self.value: int = 1
#
#     def add(self, a: int, b: int) -> int:
#         return self.value + a + b


def main():
    # # Text.
    # with open('foo.txt', 'w') as fout:
    #     fout.write('1')
    #
    # with open('foo.txt', 'r') as fin:
    #     assert fin.read() == '1'
    #
    # # Binary.
    # with open('foo.bin', 'wb') as fout:
    #     fout.write(b'\x01')
    #
    # with open('foo.bin', 'rb') as fin:
    #     assert fin.read() == b'\x01'

    res: int = 0

    if True:
        res = 1

    assert res == 1

    if False:
        res = 2
    else:
        res = 3

    assert res == 3

    if False:
        res = 4
    elif False:
        res = 5
    elif True:
        res = 6
    else:
        res = 7

    assert res == 6

    try:
        raise TypeError('foo')
    except ValueError:
        res = 8
    except TypeError as e:
        print(e)
        res = 9
    finally:
        assert res == 9
        print('finally')
        res = 10

    assert res == 10

    a: int = 5

    try:
        try:
            for i in range(5):
                print('i, a, i * a:', i, a, i * a)

            raise ValueError()
        except ValueError as e:
            res = 11
            print(e)
            raise

        raise TypeError()
    except ValueError as e:
        assert res == 11
        print(e)
        res = 12

    assert res == 12

    try:
        raise ValueError()
    except:
        res = 13
        print('Any')

    assert res == 13

    try:
        assert False
    except AssertionError as e:
        res = 14
        print(e)

    assert res == 14

    assert V1 == 2
    assert V2 == 6

    # assert calc(add) == 3
    # adder = Adder()
    # adder.value += 1
    # assert calc(adder.add) == 5

    s: str = 'hello'
    print('s:', s, len(s), str(s))
    assert len(s) == 5
    assert str(s) == s
    assert s == 'hello'
    assert s != 'hello!'
    t: str = s
    assert s == t
    t += '!'
    assert t == 'hello!'
    assert s == t
    assert str(1) == '1'
    assert str(1.0) == '1.000000'
    u: int = -5000
    v: str = str(u)
    assert v == '-5000'
    assert 4 * v == '-5000-5000-5000-5000'
    assert v * 3 == '-5000-5000-5000'
    assert v + v == '-5000-5000'
