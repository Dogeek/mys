@trait
class Base:

    def bar(self, value: i32) -> bool:
        "A docstring."

@trait
class Base2:

    def fie(self):
        pass

class Foo(Base):

    def bar(self, value: i32) -> bool:
        return True

class Bar(Base, Base2):

    def bar(self, value: i32) -> bool:
        return False

    def fie(self):
        print()

def trait_call(base: Base) -> bool:
    return base.bar(1)

@test
def test_implement_trait_in_class():
    foo = Foo()
    bar = Bar()
    assert foo.bar(1)
    assert not bar.bar(1)
    assert trait_call(Foo())
    assert not trait_call(Bar())
    bar.fie()

@trait
class TraitStr:
    pass

class TraitFoo(TraitStr):
    a: i32

class TraitBar(TraitStr):
    b: string

def trait_str(v: TraitStr) -> string:
    return str(v)

@test
def test_trait_str():
    assert trait_str(TraitFoo(5)) == "TraitFoo(a=5)"
    assert trait_str(TraitBar("Kalle")) == "TraitBar(b=\"Kalle\")"

@trait
class BaseWithMethodBody:

    def foo(self) -> i64:
        return self.x

class FooWithMethodBody(BaseWithMethodBody):
    x: i64

class BarWithMethodBody(BaseWithMethodBody):

    def foo(self) -> i64:
        return -1

def trait_with_method_body(v: BaseWithMethodBody) -> i64:
    return v.foo()

@test
def test_trait_with_method_body():
    assert trait_with_method_body(FooWithMethodBody(3)) == 3
    assert trait_with_method_body(BarWithMethodBody()) == -1
    assert FooWithMethodBody(2).foo() == 2
    assert BarWithMethodBody().foo() == -1

class Tape:
    pass

@trait
class Op:

    def execute(self, tape: Tape):
        pass

class Inc(Op):
    val: i32

    def execute(self, tape: Tape):
        pass

def run(op: Op, tape: Tape):
    op.execute(tape)

@test
def test_call_trait_method_with_class_parameter():
    run(Inc(1), Tape())

@trait
class BaseMethods:

    def only_docstring(self) -> bool:
        "A docstring."

    def only_pass(self) -> bool:
        pass

    def with_body(self) -> bool:
        return True

    def with_docstring_and_body(self) -> bool:
        "Doc!"

        return False

    def with_long_body_no_docstring(self) -> bool:
        v = True

        return v

class FooMethods(BaseMethods):

    def only_docstring(self) -> bool:
        return True

    def only_pass(self) -> bool:
        return False

@test
def test_methods():
    foo = FooMethods()

    assert foo.only_docstring()
    assert not foo.only_pass()
    assert foo.with_body()
    assert not foo.with_docstring_and_body()
    assert foo.with_long_body_no_docstring()
