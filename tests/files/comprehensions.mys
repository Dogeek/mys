@test
def test_list_of_integers():
    assert [2 * value for value in [5, 3, 2]] == [10, 6, 4]

def foo(value: i64) -> i64:
    return 3 * value

@test
def test_list_with_slice():
    assert [foo(value) for value in slice([5, 3, 2], 1)] == [9, 6]

@test
def test_list_range():
    assert [-value for value in range(5)] == [0, -1, -2, -3, -4]

def return_foo() -> [i64]:
    return [2 * value for value in [5, 3, 2]]

@test
def test_list_return():
    assert return_foo() == [10, 6, 4]

@test
def test_list_variable():
    v = [v / 2 for v in [1, 6] if v % 2 == 0]
    assert v == [3]

@test
def test_list_of_integer_variables():
    a = 3
    b = -1

    assert [value + 1 for value in [a, b, b]] == [4, 0, 0]

@test
def test_list_of_integers_variable():
    values = [4, 3]

    assert [value + 1 for value in values] == [5, 4]

@test
def test_list_of_strings_with_variables():
    five = "five"
    values = ["four", five]
    dummy = {1: 4}

    assert [value + value + "!" for value in values] == ["fourfour!", "fivefive!"]
    assert dummy == {1: 4}

@test
def test_list_of_integers_with_condition():
    assert [value - 1 for value in [5, 3, 2] if value != 3] == [4, 1]

class Foo:
    a: i64
    b: i64

@test
def test_list_of_classes():
    extra = 100
    values = [Foo(5, 6), Foo(7, 8), Foo(9, 10)]
    result = [value.a + value.b + extra for value in values if value.a != 7]
    assert result == [111, 119]

@test
def test_tuple_unpack():
    assert [x + y for x, y in [(5, 3), (2, 3)]] == [8, 5]

@test
def test_tuple_unpack_ignore():
    assert [x for x, _ in [(5, 3), (2, 3)]] == [5, 2]
