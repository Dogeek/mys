@test
def test_try_except_else():
    res = 0

    try:
        value = True
    except ValueError:
        res = 1
    else:
        # ToDo: 'value' is available
        # assert value
        res = 2

    assert res == 2

@test
def test_try_except_else_finally():
    """Same as previous test, but with finally.

    """

    res = 0

    try:
        value = True
    except ValueError:
        res = 1
    else:
        # ToDo: 'value' is available
        # assert value
        res = 2
    finally:
        res = 3

    assert res == 3

class EmptyError(Error):
    pass

@test
def test_empty_error():
    try:
        res = 0
        raise EmptyError()
    except EmptyError:
        res = 1

    assert res == 1

class MemberError(Error):
    x: i64

@test
def test_member_error_as_1():
    try:
        res = 0
        raise MemberError(9)
    except MemberError as e:
        res = e.x

    assert res == 9

@test
def test_member_error_as_2():
    error: MemberError = None

    try:
        raise MemberError(-2)
    except MemberError as e:
        error = e

    assert error.x == -2

@test
def test_member_error_as_3():
    res = 0
    error: Error = None

    try:
        raise MemberError(5)
    except MemberError as e:
        error = e

    match error:
        case MemberError() as member_error:
            res = member_error.x

    assert res == 5

@test
def test_member_error_re_raise_1():
    res = 0

    try:
        raise MemberError(5)
    except MemberError as e:
        try:
            raise e
        except MemberError as k:
            res = k.x

    assert res == 5

@test
def test_member_error_re_raise_2():
    res = 0

    try:
        raise MemberError(5)
    except MemberError as e:
        try:
            raise
        except MemberError as k:
            res = k.x

    assert res == 5

@test
def test_member_error_str():
    res = ""

    try:
        raise MemberError(10)
    except MemberError as e:
        res = str(e)

    assert res == "MemberError(x=10)"

@test
def test_1():
    res = 0

    try:
        raise TypeError("foo")
    except ValueError:
        res = 1
    except TypeError:
        res = 2
    finally:
        assert res == 2
        res = 3

    assert res == 3

@test
def test_2():
    res = 0
    a = 5

    try:
        try:
            for i in range(5):
                print("i, a, i * a:", i, a, i * a)

            raise ValueError()
        except ValueError:
            res = 11
            raise

        raise TypeError()
    except ValueError:
        assert res == 11
        res = 12

    assert res == 12

    try:
        raise ValueError()
    except:
        res = 13
        print("Any")

    assert res == 13

    try:
        assert False
    except AssertionError:
        res = 14

    assert res == 14

@test
def test_define_variable_in_try_except_branches_1():
    try:
        x: i8 = 1
    except:
        x: i8 = 2

    assert x == 1

@test
def test_define_variable_in_try_except_branches_2():
    try:
        x = 3
    except GeneralError:
        x = 2
    except ValueError:
        x = 1

    assert x == 3

@test
def test_define_variable_in_try_except_branches_3():
    try:
        x = 3
    except GeneralError:
        x = 2
    else:
        pass

    assert x == 3

@test
def test_define_variable_in_try_except_branches_4():
    try:
        x = 3
    except GeneralError:
        x = 2
    else:
        x = 4

    assert x == 4

@test
def test_define_variable_in_all_branches_1():
    try:
        if False:
            x = 1
        else:
            x = 2
    except GeneralError:
        try:
            x = 3
        except:
            if True:
                x = 4
            else:
                x = 5

    assert x == 2

@test
def test_system_exit_error():
    try:
        res = 0

        raise SystemExitError()
    except SystemExitError:
        res = 1

    assert res == 1
